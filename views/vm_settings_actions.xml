<?xml version="1.0" encoding="utf-8"?>
<odoo>

    <!-- Server Action для экспорта настроек VM Rental -->
    <record id="action_export_vm_settings" model="ir.actions.server">
        <field name="name">Export VM Rental Settings</field>
        <field name="model_id" ref="base.model_res_config_settings"/>
        <field name="state">code</field>
        <field name="code">
# Получаем текущие настройки
settings_text = """VM Rental Settings Export

Default Trial Days: %s
Auto-suspend Expired VMs: %s
Maximum CPU Cores: %s
Maximum Memory (MiB): %s
Maximum Disk (GiB): %s
Auto Backup: %s
Backup Retention Days: %s

Exported by: %s
Company: %s
Export date: %s
""" % (
    env['ir.config_parameter'].sudo().get_param('vm_rental.default_trial_days', '7'),
    env['ir.config_parameter'].sudo().get_param('vm_rental.auto_suspend', 'True'),
    env['ir.config_parameter'].sudo().get_param('vm_rental.max_cores', '64'),
    env['ir.config_parameter'].sudo().get_param('vm_rental.max_memory', '131072'),
    env['ir.config_parameter'].sudo().get_param('vm_rental.max_disk', '10240'),
    env['ir.config_parameter'].sudo().get_param('vm_rental.auto_backup', 'False'),
    env['ir.config_parameter'].sudo().get_param('vm_rental.backup_retention_days', '30'),
    env.user.name,
    env.company.name,
    fields.Datetime.now().strftime('%Y-%m-%d %H:%M:%S')
)

action = {
    'type': 'ir.actions.client',
    'tag': 'display_notification',
    'params': {
        'title': 'VM Rental Settings',
        'message': settings_text,
        'type': 'info',
        'sticky': True,
    }
}
        </field>
    </record>

    <!-- Server Action для проверки всех гипервизоров -->
    <record id="action_test_all_hypervisors" model="ir.actions.server">
        <field name="name">Test All Hypervisor Connections</field>
        <field name="model_id" ref="model_hypervisor_server"/>
        <field name="state">code</field>
        <field name="code">
results = []
servers = model.search([])

for server in servers:
    try:
        server.test_and_fetch_resources()
        results.append(f"✓ {server.name}: Connected successfully")
    except Exception as e:
        results.append(f"✗ {server.name}: {str(e)}")

message = "Hypervisor Connection Test Results:\n\n" + "\n".join(results)

action = {
    'type': 'ir.actions.client',
    'tag': 'display_notification',
    'params': {
        'title': 'Connection Test Complete',
        'message': message,
        'type': 'info',
        'sticky': True,
    }
}
        </field>
    </record>

    <!-- Server Action для очистки старых логов -->
    <record id="action_cleanup_audit_logs" model="ir.actions.server">
        <field name="name">Cleanup Old Audit Logs</field>
        <field name="model_id" ref="model_vm_rental_audit_log"/>
        <field name="state">code</field>
        <field name="code">
# Удаляем логи старше 90 дней
cutoff_date = fields.Datetime.now() - timedelta(days=90)
old_logs = model.search([('create_date', '&lt;', cutoff_date)])

if old_logs:
    count = len(old_logs)
    old_logs.unlink()
    message = "Successfully deleted %d old audit log entries" % count
    msg_type = 'success'
else:
    message = "No old audit logs found to delete"
    msg_type = 'info'

action = {
    'type': 'ir.actions.client',
    'tag': 'display_notification',
    'params': {
        'title': 'Audit Log Cleanup',
        'message': message,
        'type': msg_type,
        'sticky': False,
    }
}
        </field>
    </record>

    <!-- Server Action для проверки состояния системы -->
    <record id="action_system_health_check" model="ir.actions.server">
        <field name="name">VM Rental System Health Check</field>
        <field name="model_id" ref="model_vm_rental_machine"/>
        <field name="state">code</field>
        <field name="code">
# Собираем статистику системы
active_vms = model.search_count([('state', '=', 'active')])
pending_vms = model.search_count([('state', '=', 'pending')])
failed_vms = model.search_count([('state', '=', 'failed')])
total_vms = model.search_count([])

# Проверяем гипервизоры
hypervisors = env['hypervisor.server'].search([])
connected_hypervisors = len([h for h in hypervisors if h.status == 'connected'])

# Проверяем cron задачи
cron_jobs = env['ir.cron'].search([('name', 'ilike', 'VM Rental')])
active_crons = len([c for c in cron_jobs if c.active])

# Проверяем логи ошибок (последние 100 записей)
error_logs = env['vm_rental.audit_log'].search_count([('success', '=', False)], limit=100)

# Определяем статус
if failed_vms == 0 and error_logs &lt; 10:
    status = 'Healthy'
elif failed_vms &lt; 5:
    status = 'Needs Attention'
else:
    status = 'Critical'

health_report = """System Health Report:

VM Statistics:
• Active VMs: %d
• Pending VMs: %d
• Failed VMs: %d
• Total VMs: %d

Hypervisors:
• Connected: %d/%d

Automation:
• Active Cron Jobs: %d/%d

Recent Errors:
• Error logs: %d

Status: %s""" % (
    active_vms, pending_vms, failed_vms, total_vms,
    connected_hypervisors, len(hypervisors),
    active_crons, len(cron_jobs),
    error_logs,
    status
)

action = {
    'type': 'ir.actions.client',
    'tag': 'display_notification',
    'params': {
        'title': 'System Health Check',
        'message': health_report,
        'type': 'info',
        'sticky': True,
    }
}
        </field>
    </record>

    <!-- Добавляем новые действия в меню Tools -->
    <menuitem
        id="menu_export_settings"
        name="Export Settings"
        parent="menu_vm_tools_submenu"
        action="action_export_vm_settings"
        sequence="30"/>

    <menuitem
        id="menu_test_all_hypervisors"
        name="Test All Hypervisors"
        parent="menu_vm_tools_submenu"
        action="action_test_all_hypervisors"
        sequence="40"/>

    <menuitem
        id="menu_cleanup_logs"
        name="Cleanup Old Logs"
        parent="menu_vm_tools_submenu"
        action="action_cleanup_audit_logs"
        sequence="50"/>

    <menuitem
        id="menu_health_check"
        name="System Health Check"
        parent="menu_vm_tools_submenu"
        action="action_system_health_check"
        sequence="60"/>

    <!-- НОВОЕ: Быстрый доступ к Configuration Wizard -->
    <menuitem
        id="menu_quick_config_wizard"
        name="Quick Config Wizard"
        parent="menu_vm_tools_submenu"
        action="action_vm_config_wizard"
        sequence="15"/>

</odoo>